HW2 Due 11:59PM September 13

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***

In this homework we'll create an initial strategic design for a version of the Master Mind game.

Let's first discuss the version of the game that we'll design. We'll not be writing any code in this homework, but only create an initial strategic design.

The object of the game is for the user to guess the colors the program has chosen. The program chooses six distinct colors from among ten colors. The user obviously does not know the colors the program has chosen.

The operations user can perform and the outcome:

User picks six colors:
The program displays a color code back to indicate the progress the user has made. 

If the user guessed the exact color combination, including the positions, the result is six black colors. The game ends now with a message that the user has won and the program reveals the color selected.

If the user guessed only some colors, then the result has as many black colors as the number of direct positions matches and as many silver colors for each match that is in an incorrect position.

For example, if the program selected green, red, blue, white, orange, purple, and the user entered cyan, yellow, blue, orange, violet, red, then the program will display black, silver, silver.

User gives up: 
The program displays the colors selected, game ends with a message the user has lost.

User has made 20 tries:
The program displays the colors selected, game ends with a message the user has lost (unless in the last try the user found the combination).



Create an initial design of this program and answer the questions below. 
Feel free to ask for frequent reviews.

Include a separate file (may be a scan of hand drawn picture if you like, or a pdf, tiff, word document, etc.) which shows a UML diagram of your design. Refer to that diagram from the text description you write here.

1. How would you design this program?
This will be a GUI program that will recreate the Mind Master game. The goal of the program will be to have the user pick 6 colors out of the 10 we have given them with their order stored. Then have the program randomly pick 6 colors with their order stored. Then the program will give hints of a number of black displays if they got both the color and order correct, and silver if they got the color right but not the right order. The program will continue until the user runs out of attempts(20) or he gets 6 black colors.

There will be a Color class that stores the color options available. This class will be responsible for storing the color options available to the player. Will also be able to create random "guesses" at the beginning of each game that will be the solution for that game's puzzle. This is a separate class so that the colors may be changed in one place without affecting the rest of the program in the interest of loose coupling and modularity.

There will be a Color Checker function within Game Logic that will check if the user guesses matches the programs guesses. It will take both the player's guesses and the game solution as parameters. It will return the black and silver response based on how correct the attempt is.

There will be a Display class. This will be used by Game Logic to of display the options of valid colors from Color to the user. It will also be responsible for displaying the results from Color Checker. The intent is to simplify the Game Logic class to be primarily responsible with the flow of the program, using Color and Display as modular tools.

There will be a Game Logic class that will control the flow of the game. It will take the program solution from Color class. It will ask the user for guess input and keep track of the number of attempts. This is where the Color Checker function will be called and Display will provide feedback to the user. The program will then check if Color Checker's output is all black. If it is, the Display class will provide user feedback and the user wins. If it is not, the program then checks if the user is out of attempts. If they are then the Display class will provide user feedback and the program ends. If not the program will repeat the loop, requesting another guess from the user.

Game Logic has-a Display. Game Logic aggregates Display, as Display handles all input and output tasks for Game Logic but Display is not dependent on Game Logic, therefore it should be it's own class in the interest of modularity and the possibility of future use outside of Game Logic.

Game Logic uses Color. Game Logic associates with Color to access or manipulate puzzle data, but does not need to manage it's life cycle.


2. Discuss what language you would use.

For this program we decided to implement it in python. For our decision, we decided if any language in our correct disposition could accomplish this task, or if we would have to learn another programming language. 

We chose python because it a dynamic language. We wanted the design to be lightweight and easy to evolve in case of changes in game later. We also felt that python has good libraries to assist with the GUI of the program.



3. How do you plan to structure the program, what libraries would you use?

Our plan to structure the program is to have Game Logic call functions from Color and Display as needed. It would not require extra libraries. Just be able to control the flow and grab the return values from those functions to continue the flow.

Testing for Game Logic would be performed using the unittest module which is a part of the standard python library, and can be used to isolate and test individual functions of Game Logic.

Display would use a library for the GUI such as Tkinter, PyQt5, wxPython any of which could potentially fulfill the needs of Display. We would break down each display task into functions that would be called upon in Game Logic. Display would also be able to use unittest to test any non-GUI functions that may be needed for support.

Color would not need an external libraries. It would be store colors available in a list and be used as parameter for the other functions to give options for user or get random 6 colors program picked to be able to be called from game logic. Color would also be able to use unittest for unit testing.

Using Python also allows us to use pytest as a build tool for running our unit tests that we built using unittest.


Total  [10]: 10
