HW3 Due 11:59PM November 8

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***

1. What are the 3Cs of User Stories?

User Story is a description of a feature a Developer wants to create from the end user's point of view. It is a good way to visualize the value the user will get from the feature. It can serve as a north star in what the final goal should look like in terms of maximizing user's value. The 3Cs is a framework developed by Ron Jeffries, one of the creators of Extreme Programming. The 3Cs consist of "Card", "Conversation", and "Confirmation" which attempts to store all the components of a User Story. The benefits of the 3Cs is having a repeatable framework that can concisely help write effective User Stories for Agile development. 

Card is the starting point where User Stories are written. It is not meant for detailed technical details but for information that describes user requirements. The goal of the card is to try to capture the functionality that will be discussed and developed later. The general format of the card is to write "As the {User}, I want to {accomplish this task} so that I can {achieve this goal}. The card can also include the priority of the task and cost.

Conversation is developer team discussion, i.e. testers, business analysts and programmers, meeting and discussing the 'nitty gritty details' to clarify intent, understanding and requirements of the User Story. Developers, testers, product owner, end users, and stakeholders involved in project take part in this collaboration. This conversation process will happen initially and throughout the sprint at different times and places where each team member may ask questions, clarify and update based on the better understanding of the story. This discussion helps bring clarity about the User Story since it is sometimes hard to interpret everything written on the User Story. This step helps with any questions a team member has, clarifications on what exactly the problem is, and adjustments of the previously written story.  

Confirmation is the realm of the testers and business analysts where they define the Acceptance Criteria that should be clear on what needs to be included and tested. These criteria should attempt to make sure the users requirements/needs in the realm of the business domain and from the application point of view will be met when the story is completed. The Acceptance Criteria should not be overdone since things will almost certainly change during the actual development, as confirmation is a continual process of evolution which coincides with the team's evolving understanding. 

2. Provide examples of where we used each of the 3Cs in this class.

An example of Card can be illustrated in the high-level design process of our hw2.txt assignment, specifically in question 1 and our UML design. We can see the goal of our assignment drawn out in our UML, and what we want to accomplish for the assignment written out in the questions that we answered, specifically in question 1: "How would you design this program?" In question 1, we took our UML as a starting point to guide our discussion of 'design' to better communicate our understanding of the goal of the assignment, which classes hold which functions and how might they tie together to achieve our goal. With the high-level classes, functions, and modules 'sketched out', our scope for each of these parts and what we expected each to address was much clearer, and set us up for our next C, Conversation. The instructions for hw2, question 1, captured the needed functionality of a Card and helped us break the initial design into the appropriate 3C steps.

Conversation starts in but is not limited to, the Strategic Design phase, as this is where we start to define high-level design, goals, and features. Discussion here helps us clarify the purpose and scope, ensuring alignment with the overall project vision. An example of Conversation can be illustrated in the high-level design processes of our hw2.txt assignment, specifically in question 2, question 3, and our UML design. With our completed Card from question 1 and our bare-bones UML for reference, we further fleshed out the initial design between partners. This included question 2, "Discuss what language you would use," where we decided that Python would be a fitting language to use, as it's one we're both familiar with and it fits very nicely into the requirements we had discussed on our Card. Question 3, "How do you plan to structure the program, what libraries would you use?" further illustrates the goal of the Conversation step, as here we discussed our basic design and hashed out how we expected the classes and functions to fit together, further developing our understanding and updating our UML to reflect these new changes. Anecdotally, some of the best Conversations throughout any of our projects were through emails between group members and our professor to discuss our understanding of feedback we had received and how we might implement and improve upon our understanding and our code in general to better meet the requirements of the assignment. For assignment 3, when my partner and I were discussing how best to address the OCP violation of adding a new criteria, we were able to come up with an idea, that of reading the file name to create our criteria list, and then execute the idea in a way that satisfied OCP and the project requirements. In addition to these email conversations, my partner and I also utilized Discord for our Conversation steps with all of our assignments and homeworks. It gave us a way to 'meet', share screens, and better communicate and illustrate our ideas for different tasks and goals for each project.

An example of Confirmation is the confirming of the UML and relationship logic between the Game's classes. We then explained all of our answers for hw2.txt. Us confirming the design, confirming what language we will move forward with, and libraries and how we will structure the program. The Confirmation component is illustrated by building our first test cases based on our finalized UML, discussions from question 3, and feedback from our professor. Our tests aim to complete our acceptance criteria by testing for valid color options, our win condition of successfully guessing 6 colors in order correctly, and whether the program stays within the twenty attempts. These Acceptance Criteria help us tailor our tests to ensure that our game has the exact functionality it needs to meet our requirements. Another example of Confirmation would be the approval of Venkat after we completed our tests and requested a code review. In Assignment 3, we would have many discussions about how to implement and test different logical sections of our code, such as process_airport, and when we finally got approval that it fit our Acceptance Criteria we would get Venkat's Confirmation and move on to the next section, which in this case was fetch_a_criterion.

Overall, of the 3Cs we used Conversation and Confirmation more than Card. For Card, we got a good rough outline of what we had to do. It gave us a good north star to aim for in both our Master Mind game and Airport program. Then Conversation and Confirmation was an iterative process of us communicating between group members, emailing Venkat, asking for reviews from Venkat. Each time we came up with an idea and implemented it after Conversation, we would get Confirmation from Venkat, and we would repeat the cycle until the project was done. So Card is a very important step and starting point, but the other two Cs really built on it and were prevalent throughout the entire project.


Total [10]: -1
The requirements clarification for the server failure handling was not discussed to bring out the significance of such conversations.
